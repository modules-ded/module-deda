import asyncio
from telethon import types, events
from telethon.tl import functions
from .. import loader

@loader.tds
class Onliner(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–Ω–ª–∞–π–Ω–∞"""
    strings = {"name": "Onliner"}
    is_reading_enabled = False
    already_thanked = False

    async def read_dialogs(self):
        """ - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –≤ –∫–ª–∏–∫"""
        async for dialog in self.client.iter_dialogs():
            await self.client.send_read_acknowledge(dialog.id)

    @loader.unrestricted
    @loader.ratelimit
    async def onlcmd(self, message):
        """ - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω"""
        self.is_reading_enabled = not self.is_reading_enabled
        
        if self.is_reading_enabled:
            await message.edit("‚ôªÔ∏è–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –≤–∫–ª—é—á–µ–Ω")
            await self.read_dialogs()
            asyncio.ensure_future(self.continuous_read())
        else:
            await message.edit("üì¥–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω")

    async def continuous_read(self):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
        while self.is_reading_enabled:
            await self.read_dialogs()
            await asyncio.sleep(1)

    @loader.unrestricted
    @loader.ratelimit
    async def on_message(self, message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —á—Ç–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ"""
        if self.is_reading_enabled:
            sender_info = ""
            sender = await message.get_sender()

            if sender.first_name:
                sender_info = sender.first_name
            elif sender.username:
                sender_info = sender.username

            if sender_info:
                chat = await message.get_chat()
                sender_info = f"{chat.title}\n{sender_info}: {message.raw_text}"
                print(sender_info)
        
        if not self.already_thanked:
            pinned_msg = await message.client.send_message('me','‚ù§Ô∏è–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è –æ—Ç Just channel! –ú—ã –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏. –°–ø–∞—Å–∏–±–æ!'
            )
            await message.client(functions.messages.UpdatePinnedMessageRequest(
                peer=types.InputPeerChannel(
                    channel_id=pinned_msg.chat_id,
                    access_hash=pinned_msg.chat.access_hash
                ),
                id=pinned_msg.id,
                silent=True
            ))
            self.already_thanked = True
